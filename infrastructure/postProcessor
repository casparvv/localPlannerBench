#! /usr/bin/python3

import numpy as np
import csv
import sys
import yaml
import pprint

from metrics import (
    DistanceToPointMetric,
    MinimumDistanceToPointMetric,
    TimeToReachGoalMetric,
    ClearanceMetric,
    SolverTimesMetric,
    PathLengthMetric,
    SuccessMetric
)


def csvToRawData(fileName):
    with open(fileName) as csvfile:
        reader = csv.reader(csvfile, delimiter=",")
        return list(reader)


def listStr2FloatArray(strList):
    return np.array([float(entry) for entry in strList])


class PostProcessor(object):
    def __init__(self, pathToExp):
        self._pathToExp = pathToExp
        self._resFile = pathToExp + "/res.csv"
        self._params = {}
        self._metrices = []

    def importData(self):
        self.convertDataPoints(csvToRawData(self._resFile))

    def importConfig(self):
        setupFile = self._pathToExp + "/exp.yaml"
        with open(setupFile, 'r') as stream:
            self._params = yaml.safe_load(stream)
        self._params['goal'] = listStr2FloatArray(self._params['goal'])
        floatObstacles = []
        for obst in self._params['obstacles']:
            floatDict = {}
            floatDict['r'] = float(obst['r'])
            floatDict['x'] = listStr2FloatArray(obst['x'])
            floatObstacles.append(floatDict)
        self._params['obstacles'] = floatObstacles
        plannerFile = self._pathToExp + "/planner.yaml"
        with open(plannerFile, 'r') as stream:
            self._plannerparams = yaml.safe_load(stream)
        if not ('interval' in self._plannerparams.keys()):
            self._plannerparams['interval'] = 1

    def processHeader(self, header):
        headerDict = {}
        for i, entry in enumerate(header):
            headerDict[entry] = i
        return headerDict

    def convertDataPoints(self, rawdata):
        nbPoints = len(rawdata) - 1
        self._data = {}
        headerDict = self.processHeader(rawdata[0])
        for name in headerDict.keys():
            self._data[name] = np.array(
                [float(rawdata[i][headerDict[name]]) for i in range(1, nbPoints)]
            )

    def evaluateMetric(self, metric):
        return metric.computeMetric(self._data)

    def addMetric(self, metric):
        self._metrices.append(metric)

    def evaluate(self):
        evaluation = {}
        for metric in self._metrices:
            res = metric.computeMetric(self._data)
            evaluation[metric._name] = res
        return evaluation

    def evaluateSuccess(self, minDistToObst, reachingFlag):
        successMetric = SuccessMetric(
            "success",
            [],
            {'minClearance': minDistToObst, 'reachingFlag': reachingFlag},
        )
        return {'success': self.evaluateMetric(successMetric)}

def postProcessPointMass(pathToData):
    pp = PostProcessor(pathToData)
    pp.importData()
    pp.importConfig()
    timeToReachGoalMetric = TimeToReachGoalMetric(
        "time2Goal",
        ["q0", "q1", "t"],
        {"goal": pp._params["goal"], "des_distance": 0.001},
    )
    clearanceMetric = ClearanceMetric(
        "clearance",
        ["q0", "q1"],
        {"obstacles": pp._params["obstacles"], "n": 1, "m": 2},
    )
    solverTimesMetric = SolverTimesMetric(
        "solvertime",
        ["t_planning"],
        {"interval": pp._plannerparams['interval']}
    )
    pathLengthMetric = PathLengthMetric(
        "pathLength",
        ["q0", "q1"],
        {}
    )
    pp.addMetric(clearanceMetric)
    pp.addMetric(timeToReachGoalMetric)
    pp.addMetric(solverTimesMetric)
    pp.addMetric(pathLengthMetric)
    evaluations = pp.evaluate()
    successEval = pp.evaluateSuccess(evaluations['clearance']['minDist'], evaluations['time2Goal'][0])
    pprint.pprint(evaluations)
    pprint.pprint(successEval)
    """
    print("success : ", pp.evaluateMetric(successMetric))
    """

def postProcessPlanarArm(pathToData):
    n = 5
    m = 2
    jointNames = ["q" + str(i) for i in range(n)]
    fksNames = []
    for i in range(n):
        fksNames.append("fk" + str(i) + "_x")
        fksNames.append("fk" + str(i) + "_y")
    fkNames = ["fk" + str(n-1) + "_x", "fk" + str(n-1) + "_y"]
    pp = PostProcessor(pathToData)
    pp.importData()
    pp.importConfig()
    timeToReachGoalMetric = TimeToReachGoalMetric(
        "time2Goal",
        fkNames + ["t"],
        {"goal": pp._params["goal"], "des_distance": 0.001},
    )
    clearanceMetric = ClearanceMetric(
        "clearance",
        fksNames,
        {"obstacles": pp._params["obstacles"], "m": m, "n": n},
    )
    solverTimesMetric = SolverTimesMetric(
        "solvertime",
        ["t_planning"],
        {"interval": pp._plannerparams['interval']}
    )
    pathLengthMetric = PathLengthMetric(
        "pathLength",
        fkNames,
        {}
    )
    pp.addMetric(clearanceMetric)
    pp.addMetric(timeToReachGoalMetric)
    pp.addMetric(solverTimesMetric)
    pp.addMetric(pathLengthMetric)
    evaluations = pp.evaluate()
    successEval = pp.evaluateSuccess(evaluations['clearance']['minDist'], evaluations['time2Goal'][0])
    pprint.pprint(evaluations)
    pprint.pprint(successEval)

def postProcess(folderName):
    if "pointMass" in folderName:
        postProcessPointMass(folderName)
    elif "planarArm" in folderName:
        postProcessPlanarArm(folderName)

if __name__ == "__main__":
    postProcess(sys.argv[1])
