#! /usr/bin/python3

import argparse
import subprocess
import datetime
import time
import os
import sys
import warnings
import numpy as np
import signal

from fabricsExperiments.generic.experiment import Experiment, ExperimentInfeasible
from fabricsExperiments.generic.fabricPlanner import FabricPlanner
from fabricsExperiments.generic.mpcPlanner import MPCPlanner
from fabricsExperiments.generic.experimentSaver import ExperimentSaver


def blockPrint():
    sys.stdout = open(os.devnull, 'w')
    warnings.filterwarnings('ignore')


def enablePrint():
    sys.stdout = sys.__stdout__


class Runner(object):
    def __init__(self):
        self.initializeArgumentParser()
        signal.signal(signal.SIGINT, self.handleStop)
        self._aborted = False

    def handleStop(self, signum, frame):
        print("\n Stopping runner...")
        self.stopEnvironment()
        self._aborted = True

    def initializeArgumentParser(self):
        self._parser = argparse.ArgumentParser("Run motion planning experiment")
        self._parser.add_argument(
            "--caseSetup", "-case", type=str, help="Experiment setup file", required=True
        )
        self._parser.add_argument(
            "--planners", "-p", type=str, nargs="+", help="List of planner setup files", required=True
        )
        self._parser.add_argument(
            "--res-folder",
            "-res",
            type=str,
            default='results',
            help="Results folder",
        )
        self._parser.add_argument(
            "--numberRuns", "-n", type=int, default=1, help="Number of runs of the experiment"
        )
        self._parser.add_argument("--ros", dest="ros", action="store_true")
        self._parser.add_argument("--no-save", dest="save", action="store_false")
        self._parser.add_argument("--random-goal", dest="random_goal", action="store_true")
        self._parser.add_argument("--random-obst", dest="random_obst", action="store_true")
        self._parser.add_argument("--random-init", dest="random_init", action="store_true")
        self._parser.add_argument("--no-verbose", dest="verbose", action="store_false")
        self._parser.add_argument("--render", dest="render", action="store_true")
        self._parser.add_argument("--compare", dest="compare", action="store_true")
        self._parser.set_defaults(save=True)
        self._parser.set_defaults(ros=False)
        self._parser.set_defaults(random_goal=False)
        self._parser.set_defaults(random_obst=False)
        self._parser.set_defaults(random_init=False)
        self._parser.set_defaults(verbose=True)
        self._parser.set_defaults(render=False)
        self._parser.set_defaults(compare=False)

    def parseArguments(self):
        args = self._parser.parse_args()
        self._render = args.render
        self._save = args.save
        self._random_obst = args.random_obst
        self._random_init = args.random_init
        self._random_goal = args.random_goal
        self._numberRuns = args.numberRuns
        self._verbose = args.verbose
        self._render = args.render
        self._res_folder = os.getcwd() + '/' + args.res_folder
        self._planners = []
        self._experiment = Experiment(args.caseSetup)
        self._ros = args.ros
        self._compare = args.compare
        if self._compare:
            self._compareTimeStamp = args.caseSetup[-24:-9]
        if self._ros:
            self.startRosConverterNode()
        else:
            self._env = self._experiment.env(render=self._render)
        for i in range(0, len(args.planners), 2):
            plannerType = args.planners[i]
            plannerFile = args.planners[i+1]
            if plannerType == 'fabric':
                self._planners.append(FabricPlanner(self._experiment, plannerFile))
            elif plannerType == 'mpc':
                self._planners.append(MPCPlanner(self._experiment, plannerFile))

    def startRosConverterNode(self):
        from fabricsExperiments.infrastructure.ros_converter_node import ActionConverterNode
        dt = self._experiment.dt()
        rate_int = int(1/dt)
        self._rosConverter = ActionConverterNode(dt, rate_int, self._experiment.n())

    def setPlanner(self):
        for planner in self._planners:
            planner.reset()
            planner.setJointLimits(self._experiment.limits())
            planner.setSelfCollisionAvoidance(self._experiment.rBody())
            planner.setObstacles(self._experiment.obstacles(), self._experiment.rBody())
            planner.setGoal(self._experiment.goal())
            planner.concretize()

    def applyAction(self, action, t_exp):
        if self._ros:
            ob, t = self._rosConverter.publishAction(action)
        else:
            ob, _, _, _ = self._env.step(action)
            t = t_exp + self._experiment.dt()
        return ob, t

    def reset(self, q0, q0dot):
        if self._ros:
            ob, t0 = self._rosConverter.ob()
        else:
            ob = self._env.reset(pos=q0, vel=q0dot)
            t0 = 0.0
        return ob, t0

    def stopEnvironment(self):
        """
        if self._ros:
            res = subprocess.run(['/bin/zsh', '-i', '-c', 'stopMotion'], stdout=subprocess.PIPE)
            print(res)
        """
        return

    def run(self):
        print("start run")
        completedRuns = 0
        while completedRuns < self._numberRuns:
            self._experiment.shuffle(self._random_obst, self._random_init, self._random_goal)
            try:
                self._experiment.checkFeasibility(checkGoalReachible=False)
                completedRuns += 1
            except ExperimentInfeasible as e:
                print("Case not feasible %s" % str(e))
                continue
            print("Composing the planner")
            t0 = time.time()
            self.setPlanner()
            print("Finished composing the planner in %1.4f secs" % (time.time() - t0))
            q0, q0dot = self._experiment.initState()
            timeStamp = "{:%Y%m%d_%H%M%S}".format(datetime.datetime.now())
            if self._compare:
                timeStamp = self._compareTimeStamp
            for planner in self._planners:
                if self._experiment.robotType() == 'panda' and not self._ros:
                    self._experiment.addScene(self._env)
                if self._experiment.robotType() == 'planarArm':
                    self._experiment.addMovingObstacle(self._env)
                saver = ExperimentSaver(self._res_folder, timeStamp)
                saver.setSetups(self._experiment, planner)
                t = 0.0
                ob, t0 = self.reset(q0, q0dot)
                for i in range(self._experiment.T()):
                    if self._aborted:
                        break
                    if i % 1000 == 0:
                        print("Timestep : %d" %i)
                    q = ob[0:self._experiment.n()]
                    qdot = ob[self._experiment.n():2*self._experiment.n()]
                    t_before = time.time()
                    if self._experiment.dynamic():
                        envEval = self._experiment.evaluate(t)
                        if not planner.dynamic():
                            envEval[1] = np.zeros(3)
                            envEval[2] = np.zeros(3)
                        observation = [q, qdot] + envEval
                    else:
                        observation = [q, qdot]
                    action = planner.computeAction(*observation)
                    solving_time = time.time() - t_before
                    primeGoal = self._experiment.evaluatePrimeGoal(t)
                    obsts = self._experiment.evaluateObstacles(t)
                    saver.addResultPoint(t, q, qdot, solving_time, primeGoal, obsts)
                    ob, t_new = self.applyAction(action, t)
                    t = t_new - t0
                if self._save:
                    saver.save()
            print("Completed %d runs" % completedRuns)
            self.stopEnvironment()

def newmain():
    myRunner = Runner()
    myRunner.parseArguments()
    myRunner.run()


if __name__ == "__main__":
    newmain()
