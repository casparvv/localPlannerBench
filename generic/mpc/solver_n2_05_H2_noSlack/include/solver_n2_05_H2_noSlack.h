/*
solver_n2_05_H2_noSlack : A fast customized optimization solver.

Copyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCESPRO v5.1.0 on Monday, December 20, 2021 at 4:28:27 PM */
#ifndef solver_n2_05_H2_noSlack_H
#define solver_n2_05_H2_noSlack_H

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif


#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif


/* DATA TYPE ------------------------------------------------------------*/
typedef double solver_n2_05_H2_noSlack_float;
typedef double solver_n2_05_H2_noSlack_ldl_s_float;
typedef double solver_n2_05_H2_noSlack_ldl_r_float;
typedef double solver_n2_05_H2_noSlack_callback_float;

typedef double solver_n2_05_H2_noSlackinterface_float;

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_solver_n2_05_H2_noSlack
#define MISRA_C_solver_n2_05_H2_noSlack (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_solver_n2_05_H2_noSlack
#define RESTRICT_CODE_solver_n2_05_H2_noSlack (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_solver_n2_05_H2_noSlack
#define SET_PRINTLEVEL_solver_n2_05_H2_noSlack    (1)
#endif

/* timing */
#ifndef SET_TIMING_solver_n2_05_H2_noSlack
#define SET_TIMING_solver_n2_05_H2_noSlack    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_solver_n2_05_H2_noSlack			(200)	

/* scaling factor of line search (FTB rule) */
#define SET_FLS_SCALE_solver_n2_05_H2_noSlack		(solver_n2_05_H2_noSlack_float)(0.99)      

/* maximum number of supported elements in the filter */
#define MAX_FILTER_SIZE_solver_n2_05_H2_noSlack	(200) 

/* maximum number of supported elements in the filter */
#define MAX_SOC_IT_solver_n2_05_H2_noSlack			(4) 

/* desired relative duality gap */
#define SET_ACC_RDGAP_solver_n2_05_H2_noSlack		(solver_n2_05_H2_noSlack_float)(0.0001)

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_solver_n2_05_H2_noSlack		(solver_n2_05_H2_noSlack_float)(1E-06)

/* desired maximum residual on inequality constraints */
#define SET_ACC_RESINEQ_solver_n2_05_H2_noSlack	(solver_n2_05_H2_noSlack_float)(1E-06)

/* desired maximum violation of complementarity */
#define SET_ACC_KKTCOMPL_solver_n2_05_H2_noSlack	(solver_n2_05_H2_noSlack_float)(1E-06)


/* SOLVER RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_solver_n2_05_H2_noSlack      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_solver_n2_05_H2_noSlack (0)

/* solver has stopped due to a timeout */
#define TIMEOUT_solver_n2_05_H2_noSlack   (2)

/* wrong number of inequalities error */
#define INVALID_NUM_INEQ_ERROR_solver_n2_05_H2_noSlack  (-4)

/* factorization error */
#define FACTORIZATION_ERROR_solver_n2_05_H2_noSlack   (-5)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_solver_n2_05_H2_noSlack  (-6)

/* no progress in method possible */
#define NOPROGRESS_solver_n2_05_H2_noSlack   (-7)

/* regularization error */
#define REGULARIZATION_ERROR_solver_n2_05_H2_noSlack   (-9)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_solver_n2_05_H2_noSlack   (-11)

/* too small timeout given */
#define INVALID_TIMEOUT_solver_n2_05_H2_noSlack   (-12)

/* thread error */
#define THREAD_FAILURE_solver_n2_05_H2_noSlack  (-98)

/* locking mechanism error */
#define LOCK_FAILURE_solver_n2_05_H2_noSlack  (-99)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_solver_n2_05_H2_noSlack  (-100)

/* INTEGRATORS RETURN CODE ------------*/
/* Integrator ran successfully */
#define INTEGRATOR_SUCCESS (11)
/* Number of steps set by user exceeds maximum number of steps allowed */
#define INTEGRATOR_MAXSTEPS_EXCEEDED (12)





/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
    /* vector of size 12 */
    solver_n2_05_H2_noSlack_float x0[12];

    /* vector of size 4 */
    solver_n2_05_H2_noSlack_float xinit[4];

    /* vector of size 58 */
    solver_n2_05_H2_noSlack_float all_parameters[58];


} solver_n2_05_H2_noSlack_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
    /* vector of size 6 */
    solver_n2_05_H2_noSlack_float x1[6];

    /* vector of size 6 */
    solver_n2_05_H2_noSlack_float x2[6];


} solver_n2_05_H2_noSlack_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
    /* iteration number */
    solver_int32_default it;

	/* number of iterations needed to optimality (branch-and-bound) */
	solver_int32_default it2opt;
	
    /* inf-norm of equality constraint residuals */
    solver_n2_05_H2_noSlack_float res_eq;
	
    /* inf-norm of inequality constraint residuals */
    solver_n2_05_H2_noSlack_float res_ineq;

	/* norm of stationarity condition */
    solver_n2_05_H2_noSlack_float rsnorm;

	/* max of all complementarity violations */
    solver_n2_05_H2_noSlack_float rcompnorm;

    /* primal objective */
    solver_n2_05_H2_noSlack_float pobj;	
	
    /* dual objective */
    solver_n2_05_H2_noSlack_float dobj;	

    /* duality gap := pobj - dobj */
    solver_n2_05_H2_noSlack_float dgap;		
	
    /* relative duality gap := |dgap / pobj | */
    solver_n2_05_H2_noSlack_float rdgap;		

    /* duality measure */
    solver_n2_05_H2_noSlack_float mu;

	/* duality measure (after affine step) */
    solver_n2_05_H2_noSlack_float mu_aff;
	
    /* centering parameter */
    solver_n2_05_H2_noSlack_float sigma;
	
    /* number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;
    
    /* number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;
    
    /* step size (affine direction) */
    solver_n2_05_H2_noSlack_float step_aff;
    
    /* step size (combined direction) */
    solver_n2_05_H2_noSlack_float step_cc;    

	/* solvertime */
	solver_n2_05_H2_noSlack_float solvetime;   

	/* time spent in function evaluations */
	solver_n2_05_H2_noSlack_float fevalstime;  


} solver_n2_05_H2_noSlack_info;









/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Monday, December 20, 2021 4:28:27 PM */
/* User License expires on: (UTC) Friday, March 18, 2022 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Friday, March 18, 2022 10:00:00 PM (approx.) */
/* Solver Generation Request Id: 9daa0eef-db72-4317-89a4-c828a77e8cb6 */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef void (*solver_n2_05_H2_noSlack_extfunc)(solver_n2_05_H2_noSlack_float* x, solver_n2_05_H2_noSlack_float* y, solver_n2_05_H2_noSlack_float* lambda, solver_n2_05_H2_noSlack_float* params, solver_n2_05_H2_noSlack_float* pobj, solver_n2_05_H2_noSlack_float* g, solver_n2_05_H2_noSlack_float* c, solver_n2_05_H2_noSlack_float* Jeq, solver_n2_05_H2_noSlack_float* h, solver_n2_05_H2_noSlack_float* Jineq, solver_n2_05_H2_noSlack_float* H, solver_int32_default stage, solver_int32_default iterations, solver_int32_default threadID);

extern solver_int32_default solver_n2_05_H2_noSlack_solve(solver_n2_05_H2_noSlack_params *params, solver_n2_05_H2_noSlack_output *output, solver_n2_05_H2_noSlack_info *info, FILE *fs, solver_n2_05_H2_noSlack_extfunc evalextfunctions_solver_n2_05_H2_noSlack);	







/*Integrator declarations */
typedef const solver_int32_default* (*cDynJacXsparsity)( solver_int32_default i );
typedef const solver_int32_default* (*cDynJacUsparsity)( solver_int32_default i );
typedef solver_int32_default (*fConDynamics)( const solver_n2_05_H2_noSlack_callback_float** arg, solver_n2_05_H2_noSlack_callback_float** res, solver_int32_default* iw, solver_n2_05_H2_noSlack_callback_float* w, solver_int32_default mem );
typedef solver_int32_default (*fConJacStateDynamics)( const solver_n2_05_H2_noSlack_callback_float** arg, solver_n2_05_H2_noSlack_callback_float** res, solver_int32_default* iw, solver_n2_05_H2_noSlack_callback_float* w, solver_int32_default mem );
typedef solver_int32_default (*fConJacInputDynamics)( const solver_n2_05_H2_noSlack_callback_float** arg, solver_n2_05_H2_noSlack_callback_float** res, solver_int32_default* iw, solver_n2_05_H2_noSlack_callback_float* w, solver_int32_default mem );

void solver_n2_05_H2_noSlack_rktwo_0(const solver_n2_05_H2_noSlack_callback_float * const z, const solver_n2_05_H2_noSlack_callback_float * const p, solver_n2_05_H2_noSlack_float * const c, solver_n2_05_H2_noSlack_float * const jacc,
            fConDynamics cDyn0rd, fConDynamics cDyn, const solver_int32_default threadID);







#ifdef __cplusplus
}
#endif

#endif
