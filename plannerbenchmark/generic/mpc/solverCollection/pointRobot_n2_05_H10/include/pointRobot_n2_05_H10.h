/*
pointRobot_n2_05_H10 : A fast customized optimization solver.

Copyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCESPRO v5.1.0 on Thursday, January 20, 2022 at 3:54:21 PM */
#ifndef pointRobot_n2_05_H10_H
#define pointRobot_n2_05_H10_H

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif


#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif


/* DATA TYPE ------------------------------------------------------------*/
typedef double pointRobot_n2_05_H10_float;
typedef double pointRobot_n2_05_H10_ldl_s_float;
typedef double pointRobot_n2_05_H10_ldl_r_float;
typedef double pointRobot_n2_05_H10_callback_float;

typedef double pointRobot_n2_05_H10interface_float;

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_pointRobot_n2_05_H10
#define MISRA_C_pointRobot_n2_05_H10 (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_pointRobot_n2_05_H10
#define RESTRICT_CODE_pointRobot_n2_05_H10 (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_pointRobot_n2_05_H10
#define SET_PRINTLEVEL_pointRobot_n2_05_H10    (0)
#endif

/* timing */
#ifndef SET_TIMING_pointRobot_n2_05_H10
#define SET_TIMING_pointRobot_n2_05_H10    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_pointRobot_n2_05_H10			(200)	

/* scaling factor of line search (FTB rule) */
#define SET_FLS_SCALE_pointRobot_n2_05_H10		(pointRobot_n2_05_H10_float)(0.99)      

/* maximum number of supported elements in the filter */
#define MAX_FILTER_SIZE_pointRobot_n2_05_H10	(200) 

/* maximum number of supported elements in the filter */
#define MAX_SOC_IT_pointRobot_n2_05_H10			(4) 

/* desired relative duality gap */
#define SET_ACC_RDGAP_pointRobot_n2_05_H10		(pointRobot_n2_05_H10_float)(0.0001)

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_pointRobot_n2_05_H10		(pointRobot_n2_05_H10_float)(1E-06)

/* desired maximum residual on inequality constraints */
#define SET_ACC_RESINEQ_pointRobot_n2_05_H10	(pointRobot_n2_05_H10_float)(1E-06)

/* desired maximum violation of complementarity */
#define SET_ACC_KKTCOMPL_pointRobot_n2_05_H10	(pointRobot_n2_05_H10_float)(1E-06)


/* SOLVER RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_pointRobot_n2_05_H10      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_pointRobot_n2_05_H10 (0)

/* solver has stopped due to a timeout */
#define TIMEOUT_pointRobot_n2_05_H10   (2)

/* wrong number of inequalities error */
#define INVALID_NUM_INEQ_ERROR_pointRobot_n2_05_H10  (-4)

/* factorization error */
#define FACTORIZATION_ERROR_pointRobot_n2_05_H10   (-5)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_pointRobot_n2_05_H10  (-6)

/* no progress in method possible */
#define NOPROGRESS_pointRobot_n2_05_H10   (-7)

/* regularization error */
#define REGULARIZATION_ERROR_pointRobot_n2_05_H10   (-9)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_pointRobot_n2_05_H10   (-11)

/* too small timeout given */
#define INVALID_TIMEOUT_pointRobot_n2_05_H10   (-12)

/* thread error */
#define THREAD_FAILURE_pointRobot_n2_05_H10  (-98)

/* locking mechanism error */
#define LOCK_FAILURE_pointRobot_n2_05_H10  (-99)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_pointRobot_n2_05_H10  (-100)

/* INTEGRATORS RETURN CODE ------------*/
/* Integrator ran successfully */
#define INTEGRATOR_SUCCESS (11)
/* Number of steps set by user exceeds maximum number of steps allowed */
#define INTEGRATOR_MAXSTEPS_EXCEEDED (12)





/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
    /* vector of size 70 */
    pointRobot_n2_05_H10_float x0[70];

    /* vector of size 4 */
    pointRobot_n2_05_H10_float xinit[4];

    /* vector of size 300 */
    pointRobot_n2_05_H10_float all_parameters[300];


} pointRobot_n2_05_H10_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
    /* vector of size 7 */
    pointRobot_n2_05_H10_float x01[7];

    /* vector of size 7 */
    pointRobot_n2_05_H10_float x02[7];

    /* vector of size 7 */
    pointRobot_n2_05_H10_float x03[7];

    /* vector of size 7 */
    pointRobot_n2_05_H10_float x04[7];

    /* vector of size 7 */
    pointRobot_n2_05_H10_float x05[7];

    /* vector of size 7 */
    pointRobot_n2_05_H10_float x06[7];

    /* vector of size 7 */
    pointRobot_n2_05_H10_float x07[7];

    /* vector of size 7 */
    pointRobot_n2_05_H10_float x08[7];

    /* vector of size 7 */
    pointRobot_n2_05_H10_float x09[7];

    /* vector of size 7 */
    pointRobot_n2_05_H10_float x10[7];


} pointRobot_n2_05_H10_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
    /* iteration number */
    solver_int32_default it;

	/* number of iterations needed to optimality (branch-and-bound) */
	solver_int32_default it2opt;
	
    /* inf-norm of equality constraint residuals */
    pointRobot_n2_05_H10_float res_eq;
	
    /* inf-norm of inequality constraint residuals */
    pointRobot_n2_05_H10_float res_ineq;

	/* norm of stationarity condition */
    pointRobot_n2_05_H10_float rsnorm;

	/* max of all complementarity violations */
    pointRobot_n2_05_H10_float rcompnorm;

    /* primal objective */
    pointRobot_n2_05_H10_float pobj;	
	
    /* dual objective */
    pointRobot_n2_05_H10_float dobj;	

    /* duality gap := pobj - dobj */
    pointRobot_n2_05_H10_float dgap;		
	
    /* relative duality gap := |dgap / pobj | */
    pointRobot_n2_05_H10_float rdgap;		

    /* duality measure */
    pointRobot_n2_05_H10_float mu;

	/* duality measure (after affine step) */
    pointRobot_n2_05_H10_float mu_aff;
	
    /* centering parameter */
    pointRobot_n2_05_H10_float sigma;
	
    /* number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;
    
    /* number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;
    
    /* step size (affine direction) */
    pointRobot_n2_05_H10_float step_aff;
    
    /* step size (combined direction) */
    pointRobot_n2_05_H10_float step_cc;    

	/* solvertime */
	pointRobot_n2_05_H10_float solvetime;   

	/* time spent in function evaluations */
	pointRobot_n2_05_H10_float fevalstime;  


} pointRobot_n2_05_H10_info;









/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Thursday, January 20, 2022 3:54:22 PM */
/* User License expires on: (UTC) Friday, March 18, 2022 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Friday, March 18, 2022 10:00:00 PM (approx.) */
/* Solver Generation Request Id: 1f6efca4-0592-49c3-b012-50b620db8414 */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef void (*pointRobot_n2_05_H10_extfunc)(pointRobot_n2_05_H10_float* x, pointRobot_n2_05_H10_float* y, pointRobot_n2_05_H10_float* lambda, pointRobot_n2_05_H10_float* params, pointRobot_n2_05_H10_float* pobj, pointRobot_n2_05_H10_float* g, pointRobot_n2_05_H10_float* c, pointRobot_n2_05_H10_float* Jeq, pointRobot_n2_05_H10_float* h, pointRobot_n2_05_H10_float* Jineq, pointRobot_n2_05_H10_float* H, solver_int32_default stage, solver_int32_default iterations, solver_int32_default threadID);

extern solver_int32_default pointRobot_n2_05_H10_solve(pointRobot_n2_05_H10_params *params, pointRobot_n2_05_H10_output *output, pointRobot_n2_05_H10_info *info, FILE *fs, pointRobot_n2_05_H10_extfunc evalextfunctions_pointRobot_n2_05_H10);	







/*Integrator declarations */
typedef const solver_int32_default* (*cDynJacXsparsity)( solver_int32_default i );
typedef const solver_int32_default* (*cDynJacUsparsity)( solver_int32_default i );
typedef solver_int32_default (*fConDynamics)( const pointRobot_n2_05_H10_callback_float** arg, pointRobot_n2_05_H10_callback_float** res, solver_int32_default* iw, pointRobot_n2_05_H10_callback_float* w, solver_int32_default mem );
typedef solver_int32_default (*fConJacStateDynamics)( const pointRobot_n2_05_H10_callback_float** arg, pointRobot_n2_05_H10_callback_float** res, solver_int32_default* iw, pointRobot_n2_05_H10_callback_float* w, solver_int32_default mem );
typedef solver_int32_default (*fConJacInputDynamics)( const pointRobot_n2_05_H10_callback_float** arg, pointRobot_n2_05_H10_callback_float** res, solver_int32_default* iw, pointRobot_n2_05_H10_callback_float* w, solver_int32_default mem );

void pointRobot_n2_05_H10_rktwo_0(const pointRobot_n2_05_H10_callback_float * const z, const pointRobot_n2_05_H10_callback_float * const p, pointRobot_n2_05_H10_float * const c, pointRobot_n2_05_H10_float * const jacc,
            fConDynamics cDyn0rd, fConDynamics cDyn, const solver_int32_default threadID);







#ifdef __cplusplus
}
#endif

#endif
